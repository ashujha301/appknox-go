package appknox

import (
	"context"
	"fmt"
	"net/http"
	"reflect"
	"testing"
)

func TestVulnerability_marshall(t *testing.T) {
	testJSONMarshal(t, &Vulnerability{}, "{}")
	u := &Vulnerability{
		ID:           1,
		Name:         "n",
		Description:  "d",
		Intro:        "i",
		Compliant:    "c",
		NonCompliant: "n",
		BusinessImplication: "b",
	}
	want := `{
		"id": 1,
		"name": "n",
		"description": "d",
		"intro": "i",
		"compliant": "c",
		"non_compliant": "n",
		"business_implication": "b"
	}`
	testJSONMarshal(t, u, want)
}

func TestVulnerabilitiesService_GetByID(t *testing.T) {
	client, mux, _, teardown := setup()
	defer teardown()

	mux.HandleFunc("/api/v2/vulnerabilities/1", func(w http.ResponseWriter, r *http.Request) {
		testMethod(t, r, "GET")
		fmt.Fprint(w, `{"id":1}`)
	})

	me, _, err := client.Vulnerabilities.GetByID(context.Background(), 1)
	if err != nil {
		t.Errorf("Vulnerabilities.GetByID returned error: %v", err)
	}

	want := &Vulnerability{ID: 1}
	if !reflect.DeepEqual(me, want) {
		t.Errorf("Vulnerabilities.GetByID returned %+v, want %+v", me, want)
	}
}
