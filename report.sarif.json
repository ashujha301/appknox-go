{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093221,
          "level": "Passed",
          "message": {
            "text": "Unprotected Services"
          },
          "Vulnerability": {
            "vulnerabilityID": 1,
            "vulnerabilityDescription": "\u003cp\u003eA service was found to be shared with other apps on the device without\nan intent filter or a permission requirement therefore leaving it\naccessible to any other application on the device.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:16.734946Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093222,
          "level": "High",
          "message": {
            "text": "Improper Content Provider Permissions"
          },
          "Vulnerability": {
            "vulnerabilityID": 2,
            "vulnerabilityDescription": "\u003cp\u003eA content provider permission was set to allow access from any other app\non the device. Content providers may contain sensitive information about\nan app and therefore should not be shared.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:17.068484Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093228,
          "level": "High",
          "message": {
            "text": "Application Debugging"
          },
          "Vulnerability": {
            "vulnerabilityID": 3,
            "vulnerabilityDescription": "\u003cp\u003eDebugging was enabled on the app which makes it easier for reverse\nengineers to hook a debugger to it. This allows dumping a stack trace\nand accessing debugging helper classes.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:17.263931Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093260,
          "level": "Passed",
          "message": {
            "text": "Improper Custom Permissions"
          },
          "Vulnerability": {
            "vulnerabilityID": 4,
            "vulnerabilityDescription": "\u003cp\u003eA custom permission controls whether other applications can access the\naffected apps features. The use of the dangerous label places no\nrestrictions on which apps can access the application declaring the\npermission but the user will be warned that the dangerous permission is\nrequired during installation.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:17.449453Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093212,
          "level": "Passed",
          "message": {
            "text": "Broken SSL Trust Manager"
          },
          "Vulnerability": {
            "vulnerabilityID": 5,
            "vulnerabilityDescription": "\u003cp\u003eImplements naive certificate check. This Trust Manager breaks\ncertificate validation.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:23.603468Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093211,
          "level": "Passed",
          "message": {
            "text": "Broken HostnameVerifier for SSL"
          },
          "Vulnerability": {
            "vulnerabilityID": 6,
            "vulnerabilityDescription": "\u003cp\u003eImplements naive hostname verification. This HostnameVerifier breaks\ncertificate validation!\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:29.556436Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093241,
          "level": "Passed",
          "message": {
            "text": "Insecure SSLSocketFactories"
          },
          "Vulnerability": {
            "vulnerabilityID": 7,
            "vulnerabilityDescription": "\u003cp\u003eSSL Implementations are not proper in this application\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:35.628416Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093213,
          "level": "Passed",
          "message": {
            "text": "HostnameVerifier Allowing All Hostnames"
          },
          "Vulnerability": {
            "vulnerabilityID": 8,
            "vulnerabilityDescription": "\u003cp\u003eImplements AllowAllHostname verifier which might allow hacker to\neavesdrop into the connection.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:42.102858Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093242,
          "level": "Passed",
          "message": {
            "text": "App Extending WebViewClient"
          },
          "Vulnerability": {
            "vulnerabilityID": 9,
            "vulnerabilityDescription": "\u003cp\u003eThe default handling of WebViewClient should handle the\nonReceivedSSLError properly, which might break certificate validation\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:48.577536Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093244,
          "level": "Low",
          "message": {
            "text": "Unused Permissions"
          },
          "Vulnerability": {
            "vulnerabilityID": 10,
            "vulnerabilityDescription": "\u003cp\u003eApplication seems to be using extra permissions which are not really\nneeded\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:52.958733Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093195,
          "level": "Passed",
          "message": {
            "text": "JavascriptInterface Remote Code Execution"
          },
          "Vulnerability": {
            "vulnerabilityID": 11,
            "vulnerabilityDescription": "\u003cp\u003eApplication seems to use \u003ccode\u003eJavascriptInterface\u003c/code\u003e. An attacker can use it to\ndo a Remote Code Execution on your application and steal sensitive\ninformation.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:53.147972Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093214,
          "level": "Unknown",
          "message": {
            "text": "Storing Information in Shared Preferences"
          },
          "Vulnerability": {
            "vulnerabilityID": 14,
            "vulnerabilityDescription": "\u003cp\u003eInsecured information was found in shared preference. One shouldn't\nuse un-encrypted information in SharedPreference.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:00.969233Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093171,
          "level": "Passed",
          "message": {
            "text": "Insufficient Transport Layer Protection"
          },
          "Vulnerability": {
            "vulnerabilityID": 15,
            "vulnerabilityDescription": "\u003cp\u003eInsufficient transport layer protection issues happen when the data is\nsent from the mobile app to the server over unsecure channels. Whether\nthe data is transmitted through the carrier network or through WiFi, it\nwill end up through the Internet either way before it could reach the\nremote server. There are several ways where unprotected data transmitted\nover the network could be sniffed; things like routers, proxies, cell\ntowers, are some of the few ways data could be sniffed while in transit.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:53.341726Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093186,
          "level": "High",
          "message": {
            "text": "Derived Crypto Keys"
          },
          "Vulnerability": {
            "vulnerabilityID": 16,
            "vulnerabilityDescription": "\u003cp\u003eTraces of Crypto Keys which might be intermediate keys used when loading\nthe different libraries.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:53.527446Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093201,
          "level": "Medium",
          "message": {
            "text": "Application Logs"
          },
          "Vulnerability": {
            "vulnerabilityID": 17,
            "vulnerabilityDescription": "\u003cp\u003eApplication was found to be writing logs to the system logs\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:54.116788Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093185,
          "level": "Unknown",
          "message": {
            "text": "Business Logic"
          },
          "Vulnerability": {
            "vulnerabilityID": 18,
            "vulnerabilityDescription": "\u003cp\u003eLogical Flaws through API which can bypass authorization and get\ninformation about other users. Authorization and\nauthenticated sessions were not properly validated on both client or\nserver side\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:59.231327Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093188,
          "level": "Passed",
          "message": {
            "text": "PhoneGap JavaScript Injection"
          },
          "Vulnerability": {
            "vulnerabilityID": 29,
            "vulnerabilityDescription": "\u003cp\u003eApplication using older version of Phonegap has Javascript Injection\nVulnerability\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:54.299109Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093215,
          "level": "Passed",
          "message": {
            "text": "Remote URL Redirection Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 30,
            "vulnerabilityDescription": "\u003cp\u003eAndroid application which uses older version of PhoneGap is vulnerable\nto URL redirection to arbitrary website as defined by CVE-3500\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:54.475962Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093230,
          "level": "Passed",
          "message": {
            "text": "PhoneGap Error URL Redirection Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 31,
            "vulnerabilityDescription": "\u003cp\u003eAndroid application which uses older version of PhoneGap is vulnerable\nto Error URL redirection to arbitrary website as defined by CVE-3500\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:54.653413Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093196,
          "level": "Passed",
          "message": {
            "text": "PhoneGap HTTPS Bypass Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 32,
            "vulnerabilityDescription": "\u003cp\u003eDeprecated Android PhoneGap application is affected with CVE-3501 via\nwhich attackers can downgrade HTTPS connection to HTTP\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:54.822496Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093217,
          "level": "Passed",
          "message": {
            "text": "PhoneGap HTTPS Whitelist Bypass"
          },
          "Vulnerability": {
            "vulnerabilityID": 33,
            "vulnerabilityDescription": "\u003cp\u003eIn PhoneGap if regex is used to whitelist, this checks if HTTPS can be\nbypassed from that regex\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:55.001637Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093216,
          "level": "Passed",
          "message": {
            "text": "Cordova Remote Start Page Manipulation Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 34,
            "vulnerabilityDescription": "\u003cp\u003eAccording to CVE-3500 Apache Cordova had a vulnerability to change the\nstart page\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:55.182746Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093198,
          "level": "Passed",
          "message": {
            "text": "PhoneGap Debug Logging"
          },
          "Vulnerability": {
            "vulnerabilityID": 35,
            "vulnerabilityDescription": "\u003cp\u003eWhile using PhoneGap to develop application, always stop debugging logs\nvia PhoneGap\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:55.362703Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093191,
          "level": "Passed",
          "message": {
            "text": "PhoneGap Whitelisted URLs"
          },
          "Vulnerability": {
            "vulnerabilityID": 36,
            "vulnerabilityDescription": "\u003cp\u003eWhile using PhoneGap to develop application, always try to whitelist the\nURL via which it connects\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:55.538602Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093231,
          "level": "High",
          "message": {
            "text": "Connection to External Redis Server"
          },
          "Vulnerability": {
            "vulnerabilityID": 37,
            "vulnerabilityDescription": "\u003cp\u003eAndroid applications which use Redis to communicate are vulnerable\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:55.738508Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093177,
          "level": "Low",
          "message": {
            "text": "Unprotected Exported Activities"
          },
          "Vulnerability": {
            "vulnerabilityID": 38,
            "vulnerabilityDescription": "\u003cp\u003eThe Android application exports Activity for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it contains.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:55.914257Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093181,
          "level": "Low",
          "message": {
            "text": "Unprotected Exported Receivers"
          },
          "Vulnerability": {
            "vulnerabilityID": 39,
            "vulnerabilityDescription": "\u003cp\u003eThe Android application exports Receiver for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it contains.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:56.085017Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093190,
          "level": "Low",
          "message": {
            "text": "Unprotected Exported Service"
          },
          "Vulnerability": {
            "vulnerabilityID": 40,
            "vulnerabilityDescription": "\u003cp\u003eThe Android application exports Service for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it contains.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:56.256986Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093232,
          "level": "Passed",
          "message": {
            "text": "Unprotected Exported Provider"
          },
          "Vulnerability": {
            "vulnerabilityID": 41,
            "vulnerabilityDescription": "\u003cp\u003eThe Android application exports a Content Provider for use by other\napplications, but does not properly restrict which applications can\nlaunch the component or access the data it contains.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:56.430401Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093175,
          "level": "Low",
          "message": {
            "text": "Non-signature Protected Exported Activities"
          },
          "Vulnerability": {
            "vulnerabilityID": 42,
            "vulnerabilityDescription": "\u003cp\u003eThe Android application exports Activity for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it contains via custom signature defined by\n\u003ccode\u003eandroid:protectionLevel\u003c/code\u003e.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:56.613793Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093202,
          "level": "Low",
          "message": {
            "text": "Non-signature Protected Exported Receivers"
          },
          "Vulnerability": {
            "vulnerabilityID": 43,
            "vulnerabilityDescription": "\u003cp\u003eThe Android application exports Broadcast Receiver for use by other\napplications, but does not properly restrict which applications can\nlaunch the component or access the data it containscustom signature\ndefined by \u003ccode\u003eandroid:protectionLevel\u003c/code\u003e.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:56.788089Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093234,
          "level": "Low",
          "message": {
            "text": "Non-signature Protected Exported Services"
          },
          "Vulnerability": {
            "vulnerabilityID": 44,
            "vulnerabilityDescription": "\u003cp\u003eThe Android application exports Service for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it containscustom signature defined by\n\u003ccode\u003eandroid:protectionLevel\u003c/code\u003e.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:56.960508Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093235,
          "level": "Low",
          "message": {
            "text": "Non-signature Protected Exported Providers"
          },
          "Vulnerability": {
            "vulnerabilityID": 45,
            "vulnerabilityDescription": "\u003cp\u003eThe Android application exports Content Provider for use by other\napplications, but does not properly restrict which applications can\nlaunch the component or access the data it containscustom signature\ndefined by \u003ccode\u003eandroid:protectionLevel\u003c/code\u003e.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:57.122404Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093182,
          "level": "Passed",
          "message": {
            "text": "Content Provider File Traversal Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 46,
            "vulnerabilityDescription": "\u003cp\u003eDepending on the implementation of \u003ccode\u003eContentProvider\u003c/code\u003e, use of the method\ncan lead to a directory traversal vulnerability.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:57.327883Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093203,
          "level": "Unknown",
          "message": {
            "text": "WebView Exploits"
          },
          "Vulnerability": {
            "vulnerabilityID": 55,
            "vulnerabilityDescription": "\u003cp\u003eWebView can be susceptible to various exploits including client side\nJavascript injection and network sniffing if improperly implemented.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:00.30487Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093189,
          "level": "Unknown",
          "message": {
            "text": "Insecure Hashing Algorithms"
          },
          "Vulnerability": {
            "vulnerabilityID": 57,
            "vulnerabilityDescription": "\u003cp\u003eUsing cryptographically insecure hash function algorithms may severely compromise\nthe integrity of data.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:59.465537Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093243,
          "level": "Unknown",
          "message": {
            "text": "One Time Password Bypass"
          },
          "Vulnerability": {
            "vulnerabilityID": 58,
            "vulnerabilityDescription": "\u003cp\u003eWe used following approaches to check if the OTP could be bypassed:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCheck if the generated OTP can be re-generated by breaking into the logic of how an OTP is generated\u003c/li\u003e\n\u003cli\u003eCheck if the OTP challenge is present in the client side, which includes in response body or stored in filesystem layer or in the memory layer\u003c/li\u003e\n\u003cli\u003eCheck if an older OTP can be re-used again in the future transaction\u003c/li\u003e\n\u003cli\u003eCheck the randomness of the OTP\u003c/li\u003e\n\u003cli\u003eCheck if the OTP could be brute-forced by requesting wrong OTP until a correct OTP can be verified\u003c/li\u003e\n\u003cli\u003eCheck the expiry time of a generated OTP\u003c/li\u003e\n\u003cli\u003eCheck the number of wrong attempts accepted to verify an OTP\u003c/li\u003e\n\u003c/ul\u003e",
            "updatedOn": "2024-05-15T07:56:02.809494Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093199,
          "level": "Unknown",
          "message": {
            "text": "Insecure Direct Object Reference"
          },
          "Vulnerability": {
            "vulnerabilityID": 60,
            "vulnerabilityDescription": "\u003cp\u003eTo test for this vulnerability, all locations in the application need to be mapped where user input is used to reference objects directly.\nFor example, locations where user input is used to access a database row, a file or even an application page.\nNext, the value of the parameter used to reference objects is modified and assessed whether it is possible to\nretrieve objects belonging to other users or otherwise bypass authorisation.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:00.066782Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093255,
          "level": "Unknown",
          "message": {
            "text": "General Server Vulnerabilities"
          },
          "Vulnerability": {
            "vulnerabilityID": 65,
            "vulnerabilityDescription": "\u003cp\u003eThe API may be susceptible to general server vulnerabilities, which can lead to\nfurther attacks\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:03.59847Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093187,
          "level": "Unknown",
          "message": {
            "text": "Buffer Overflow Vulnerabilities in HTTP Requests"
          },
          "Vulnerability": {
            "vulnerabilityID": 66,
            "vulnerabilityDescription": "\u003cp\u003eOne or more API requests may be vulnerable to Buffer overflow issues\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:59.34932Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093245,
          "level": "Unknown",
          "message": {
            "text": "Command Injection Vulnerabilities in HTTP Requests"
          },
          "Vulnerability": {
            "vulnerabilityID": 67,
            "vulnerabilityDescription": "\u003cp\u003eOne or more API requests were found to be vulnerable to command injection vulnerabilities\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:02.945775Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093210,
          "level": "Unknown",
          "message": {
            "text": "Integer Overflow Vulnerabilities in HTTP Requests"
          },
          "Vulnerability": {
            "vulnerabilityID": 68,
            "vulnerabilityDescription": "\u003cp\u003eThe API may be vulnerable to integer overflow issues\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:00.732645Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093248,
          "level": "Unknown",
          "message": {
            "text": "JSON Depth Overflow in HTTP Requests"
          },
          "Vulnerability": {
            "vulnerabilityID": 69,
            "vulnerabilityDescription": "\u003cp\u003eThe JSON parser used by the API may be vulnerable to depth overflow issues\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:03.139059Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093172,
          "level": "Unknown",
          "message": {
            "text": "LDAP Injection Vulnerabilities in HTTP Requests"
          },
          "Vulnerability": {
            "vulnerabilityID": 70,
            "vulnerabilityDescription": "\u003cp\u003eThe API may be vulnerable to LDAP injection\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:58.471472Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093193,
          "level": "Unknown",
          "message": {
            "text": "Regex DoS Vulnerabilities in HTTP Requests"
          },
          "Vulnerability": {
            "vulnerabilityID": 71,
            "vulnerabilityDescription": "\u003cp\u003eInstances of Regex DoS vulnerabilities were found in API requests\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:59.711899Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093220,
          "level": "Unknown",
          "message": {
            "text": "SQL Injection Vulnerabilities in HTTP Requests"
          },
          "Vulnerability": {
            "vulnerabilityID": 72,
            "vulnerabilityDescription": "\u003cp\u003eOne or more API requests were found to be vulnerable to SQL injection\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:01.341583Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093209,
          "level": "Unknown",
          "message": {
            "text": "String Validation Vulnerabilities in HTTP Requests"
          },
          "Vulnerability": {
            "vulnerabilityID": 73,
            "vulnerabilityDescription": "\u003cp\u003eOur scanner found string validation vulnerabilities in one or more HTTP requests\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:00.675191Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093237,
          "level": "Unknown",
          "message": {
            "text": "XML-external-entity Injection Vulnerabilities in HTTP Body"
          },
          "Vulnerability": {
            "vulnerabilityID": 74,
            "vulnerabilityDescription": "\u003cp\u003eOur scanner detected occurrences of XML-external-entity injection vulnerabilities\nin HTTP body of API calls\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:02.43628Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093208,
          "level": "Unknown",
          "message": {
            "text": "Cross-site-scripting Vulnerabilities in HTTP Body"
          },
          "Vulnerability": {
            "vulnerabilityID": 75,
            "vulnerabilityDescription": "\u003cp\u003eOne or more API calls were found to be vulnerable to Cross-Site Scripting (XSS) attacks\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:00.613703Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093197,
          "level": "Unknown",
          "message": {
            "text": "CORS Wild Character Vulnerabilities in HTTP Headers"
          },
          "Vulnerability": {
            "vulnerabilityID": 76,
            "vulnerabilityDescription": "\u003cp\u003eOne or more API requests were found to have CORS wild character vulnerability within in HTTP headers\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:59.947092Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093200,
          "level": "Unknown",
          "message": {
            "text": "Cross Site Tracing Vulnerabilities"
          },
          "Vulnerability": {
            "vulnerabilityID": 77,
            "vulnerabilityDescription": "\u003cp\u003eOne or more API requests were found to be susceptible to Cross Site Tracing vulnerabilities\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:00.123986Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093233,
          "level": "Unknown",
          "message": {
            "text": "Response Body Contains Non-HTTPS Links"
          },
          "Vulnerability": {
            "vulnerabilityID": 78,
            "vulnerabilityDescription": "\u003cp\u003eOne or more of the API responses were found to contain URL links that do not employ HTTPS,\nie. that use regular, cleartext HTTP.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:02.17001Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093184,
          "level": "Passed",
          "message": {
            "text": "Sending Address Book Data over Unencrypted Insecure Transport Layer"
          },
          "Vulnerability": {
            "vulnerabilityID": 82,
            "vulnerabilityDescription": "\u003cp\u003eIf Contact List is sent via Network Layer, ensure that Proper\nCertificate Pinning and encryption is being used.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:01.694825Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093223,
          "level": "Medium",
          "message": {
            "text": "Disabled SSL CA Validation and Certificate Pinning"
          },
          "Vulnerability": {
            "vulnerabilityID": 83,
            "vulnerabilityDescription": "\u003cp\u003eA host or service's certificate or public key can be added to an\napplication at development time, or it can be added upon first encountering\nthe certificate or public key. The former - adding at development time -\nis preferred since preloading the certificate or public key out of band\nusually means the attacker cannot taint the pin.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:01.892884Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093247,
          "level": "Passed",
          "message": {
            "text": "Surreptitious Sharing on Android"
          },
          "Vulnerability": {
            "vulnerabilityID": 84,
            "vulnerabilityDescription": "\u003cp\u003eThis activity receives \u003ccode\u003eandroid.intent.action.SEND\u003c/code\u003e or\n\u003ccode\u003eandroid.intent.action.SEND_MULTIPLE\u003c/code\u003e intents and accepts a file-scheme as data\nURI \u003ccode\u003e(file://...)\u003c/code\u003e as parameter. It may be vulnerable to surreptitious sharing:\na malicious application may set a URI referencing a private file of this\napplication, and if no proper sanity checking is done this might be used\nto obtain the referenced file.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:02.053022Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093192,
          "level": "Passed",
          "message": {
            "text": "Android Fragment Injection"
          },
          "Vulnerability": {
            "vulnerabilityID": 85,
            "vulnerabilityDescription": "\u003cp\u003eWith this vulnerability the attacker will be able to call non exported\nActivities or fragments inside the target application.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:02.290337Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093240,
          "level": "Passed",
          "message": {
            "text": "Do not allow WebView to access sensitive local resource through file scheme"
          },
          "Vulnerability": {
            "vulnerabilityID": 86,
            "vulnerabilityDescription": "\u003cp\u003eAllowing WebView to access sensitive resources may result in information leaks.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:02.472493Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093229,
          "level": "Unknown",
          "message": {
            "text": "Misconfigured AWS S3 Buckets"
          },
          "Vulnerability": {
            "vulnerabilityID": 87,
            "vulnerabilityDescription": "\u003cp\u003eSince the bucket is misconfigured, any user with an AWS access key will be able to read or write\nto the bucket leading to loss of confidentiality and integrity.\nIn case the access keys are leaked, anyone with the keys can gain administrative\nprivileges over the bucket and it’s objects leading to compromise of the data.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:01.924187Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093205,
          "level": "Passed",
          "message": {
            "text": "Insecure Broadcast Receivers registered dynamically"
          },
          "Vulnerability": {
            "vulnerabilityID": 88,
            "vulnerabilityDescription": "\u003cp\u003eBroadcast Receivers which are set Dynamically and are not protected\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:02.73994Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093256,
          "level": "Passed",
          "message": {
            "text": "Android Component Hijacking via Intent"
          },
          "Vulnerability": {
            "vulnerabilityID": 89,
            "vulnerabilityDescription": "\u003cp\u003eAn implicit intent is being created. This may leave to an intent hijacking\nattack where a malicious application registers for the same action and\ncategory and could be able to intercept the intent to compromise data or\nalter behaviour\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:03.010394Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093219,
          "level": "Unknown",
          "message": {
            "text": "Sensitive information in Sqlite database"
          },
          "Vulnerability": {
            "vulnerabilityID": 90,
            "vulnerabilityDescription": "\u003cp\u003eSQLITE databases which are leaking information and their queries are listed\nbelow:\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:01.279383Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093218,
          "level": "Medium",
          "message": {
            "text": "MediaProjection: Android Service Allows Recording of Audio, Screen Activity"
          },
          "Vulnerability": {
            "vulnerabilityID": 92,
            "vulnerabilityDescription": "\u003cp\u003eProtect all sensitive windows within the App by enabling the \u003ccode\u003eFLAG_SECURE\u003c/code\u003e flag. This flag will prevent Apps from being able to record the protected windows. Also, the flag will prevent users from taking screenshots of these windows (by pressing the VOLUME_DOWN and POWER buttons). As such screenshots are stored on the SDCard by default, they are accessible to all Apps and sensitive data may be exposed.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:03.197495Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093246,
          "level": "Medium",
          "message": {
            "text": "External data in raw SQL queries"
          },
          "Vulnerability": {
            "vulnerabilityID": 93,
            "vulnerabilityDescription": "\u003cp\u003eInclusion of input into raw SQL queries can potentially lead to a local SQL injection vulnerability in the mobile application.\u003c/p\u003e\n\u003cp\u003eThe correct approach is to use prepared SQL statements beyond user's control.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:03.36707Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093174,
          "level": "Passed",
          "message": {
            "text": "Javascript CORS enabled in Webview"
          },
          "Vulnerability": {
            "vulnerabilityID": 94,
            "vulnerabilityDescription": "\u003cp\u003eJavascript in the Webview having CORS enabled to be loaded from file and any arbitrary URL\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:03.533447Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093176,
          "level": "Passed",
          "message": {
            "text": "Java Object Deserialization Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 95,
            "vulnerabilityDescription": "\u003cp\u003eObject deserialization performed on an untrusted resource (e.g. user-supplied input or external storage), can be dangerous if the data for deserialization is tampered by an attacker.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:03.693336Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093173,
          "level": "Low",
          "message": {
            "text": "Enabled Android Application Backup"
          },
          "Vulnerability": {
            "vulnerabilityID": 96,
            "vulnerabilityDescription": "\u003cp\u003eApplication backup might contain sensitive information private data of the app into their PC\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:03.847585Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093258,
          "level": "Passed",
          "message": {
            "text": "Deprecated setPluginState in WebView"
          },
          "Vulnerability": {
            "vulnerabilityID": 98,
            "vulnerabilityDescription": "\u003cp\u003e\u003ccode\u003esetPluginState\u003c/code\u003e has security implication and deprecated by Android. It is unsafe to use in production.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:04.01369Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093238,
          "level": "Unknown",
          "message": {
            "text": "Improper Session Management"
          },
          "Vulnerability": {
            "vulnerabilityID": 99,
            "vulnerabilityDescription": "\u003cp\u003eIf the application does not manage sessions securely, an attacker may be able to remotely compromise accounts, reuse the tokens to make unauthorised API calls on behalf of other users.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:02.496126Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093178,
          "level": "Unknown",
          "message": {
            "text": "Insecure Cookie Attributes"
          },
          "Vulnerability": {
            "vulnerabilityID": 101,
            "vulnerabilityDescription": "\u003cp\u003e\"HTTPOnly\" cookies cannot be read by client-side scripts, therefore marking a cookie as HTTPOnly can provide an additional layer of protection against cross-site scripting attacks.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:58.797639Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093180,
          "level": "Unknown",
          "message": {
            "text": "Sensitive Information Disclosure"
          },
          "Vulnerability": {
            "vulnerabilityID": 102,
            "vulnerabilityDescription": "\u003cp\u003eApplications sometimes inadvertently expose sensitive data such as user’s passwords, financial\ndata, health records, PII etc. and this data can be stolen by attackers to perform identity theft,\nconduct credit card frauds and large no. of other crimes.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:58.912708Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093236,
          "level": "Unknown",
          "message": {
            "text": "Stack Trace Enabled"
          },
          "Vulnerability": {
            "vulnerabilityID": 103,
            "vulnerabilityDescription": "\u003cp\u003eStack Trace by themselves are not vulnerabilities, but reveal information which can be leveraged by an attacker. Attackers try to get this information by fuzzing and tampering the input data.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:02.372675Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093252,
          "level": "Low",
          "message": {
            "text": "Bytecode Obfuscation"
          },
          "Vulnerability": {
            "vulnerabilityID": 104,
            "vulnerabilityDescription": "\u003cp\u003eJava source code is typically compiled into Java bytecode – the instruction set of the Java virtual machine.\nThe compiled Java bytecode can be easily reversed engineered back into source\ncode by freely available decompilers. Bytecode Obfuscation is the process of modifying\nJava bytecode (executable or library) so that it is much harder to read and understand\nfor a hacker but remains fully functional.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:04.670905Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093207,
          "level": "Unknown",
          "message": {
            "text": "HTTP TRACE method is enabled"
          },
          "Vulnerability": {
            "vulnerabilityID": 105,
            "vulnerabilityDescription": "\u003cp\u003eHTTP TRACE method is enabled on this web server.\nIn the presence of other cross-domain vulnerabilities in web browsers,\nsensitive header information could be read from any domains that support\nthe HTTP TRACE method.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:00.547695Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093257,
          "level": "Unknown",
          "message": {
            "text": "HTTP Host Header Injection"
          },
          "Vulnerability": {
            "vulnerabilityID": 106,
            "vulnerabilityDescription": "\u003cp\u003eHost header attack, also known as Host header injection, is a web attack where the attacker\n provides a false Host header to the web application.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:03.738415Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093183,
          "level": "Unknown",
          "message": {
            "text": "OpenSSL CCS Injection Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 107,
            "vulnerabilityDescription": "\u003cp\u003eThis vulnerability allows malicious intermediate nodes to intercept encrypted\ndata and decrypt them while forcing SSL clients to use weak keys which are\nexposed to the malicious nodes.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:55:59.097408Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093249,
          "level": "Unknown",
          "message": {
            "text": "TLS Protocol Downgrade Attack"
          },
          "Vulnerability": {
            "vulnerabilityID": 108,
            "vulnerabilityDescription": "\u003cp\u003eTo work with legacy servers, many TLS clients implement a downgrade path,\nin a first handshake attempt, offer the highest protocol version supported by\nthe client; if this handshake fails, then retry (possibly repeatedly) with\nearlier protocol versions.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:03.200596Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093251,
          "level": "Unknown",
          "message": {
            "text": "Heartbleed Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 109,
            "vulnerabilityDescription": "\u003cp\u003eThe Heartbleed Bug is a serious vulnerability in the popular OpenSSL\ncryptographic software library.\nThis weakness allows stealing the information protected, under normal\nconditions, by the SSL/TLS encryption used to secure the Internet.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:03.322697Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093226,
          "level": "Unknown",
          "message": {
            "text": "TLS ROBOT Attack"
          },
          "Vulnerability": {
            "vulnerabilityID": 110,
            "vulnerabilityDescription": "\u003cp\u003eAn attacker can passively record the traffic and later on decrypt it.\nEven though forward secrecy is enabled, the risk depends on how fast an\nattacker is able to perform the attack.\nAlso, a server impersonation or a man-in-the-middle attack is possible\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:01.733814Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093227,
          "level": "Unknown",
          "message": {
            "text": "TLS/SSL CRIME Attack"
          },
          "Vulnerability": {
            "vulnerabilityID": 111,
            "vulnerabilityDescription": "\u003cp\u003eCRIME (Compression Ratio Info-leak Made Easy) is a security exploit against\nsecret web cookies over connections using the HTTPS and SPDY protocols\nthat also use data compression\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:01.799979Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093250,
          "level": "Unknown",
          "message": {
            "text": "SSL/TLS Renegotiation Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 112,
            "vulnerabilityDescription": "\u003cp\u003eSSL/TLS Renegotiation an attacker can arrange to inject traffic into a\nlegitimate client-server exchange such that the TLS server will accept\nit as if it came from the client. This may allow the attacker to execute\noperations on the server using the client's credentials\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:03.263111Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093206,
          "level": "Medium",
          "message": {
            "text": "Network Security Misconfiguration"
          },
          "Vulnerability": {
            "vulnerabilityID": 113,
            "vulnerabilityDescription": "\u003cp\u003eThis technique allows the user to secure the communication in the application\nby specifying proper values to the flags which are present in the network security\nconfiguration file. If implemented correctly it can help in securing the application\nby communicating only on secure protocols like HTTPS. It can also be used to implement\ncertificate pinning by using the SHA-256 hashes of the public certificate.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:04.856732Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093254,
          "level": "Unknown",
          "message": {
            "text": "Insecure Biometric Authentication"
          },
          "Vulnerability": {
            "vulnerabilityID": 114,
            "vulnerabilityDescription": "\u003cp\u003eBiometric authentication bypass is possible if application logic not using the crypto\nobject in the biometric authentication callback.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:03.525615Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093259,
          "level": "Unknown",
          "message": {
            "text": "Root Detection"
          },
          "Vulnerability": {
            "vulnerabilityID": 116,
            "vulnerabilityDescription": "\u003cp\u003eSince a rooted device is much more at risk of being compromised,\nit is important to know about it. Detecting whether the device is\nrooted or not is essential for further security measures.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:03.876482Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093194,
          "level": "Medium",
          "message": {
            "text": "Janus Vulnerability (CVE-2017-13156)"
          },
          "Vulnerability": {
            "vulnerabilityID": 117,
            "vulnerabilityDescription": "\u003cp\u003eThe application is signed using v1 signature scheme which makes it vulnerable to Janus Vulnerability on unpatched Android 5.1.1 to 8.0. Please note that apps that are dual signed with v1 and v2 or v3 are still vulnerable on devices that does not enforce rollback protection on the specified unpatched Android versions supporting v2 and above.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:05.04437Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093224,
          "level": "Medium",
          "message": {
            "text": "StrandHogg Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 118,
            "vulnerabilityDescription": "\u003cp\u003eOne or more than one public facing activities of the application is vulnerable to StandHogg vulnerability.\u003c/p\u003e\n\u003cp\u003eIn StrandHogg and regular task hijacking, malicious applications typically deploy one of the following techniques or a selection in tandem:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTask Affinity Manipulation\u003c/strong\u003e: The malicious application leverages two activities, M1 and M2, wherein M2.taskAffinity = com.victim.app and M2.allowTaskReparenting = true. In the eventuality that the malicious app is opened on M2, M2 would be relocated to the front and the user will interact with the malicious application once the victim application has initiated.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSingle Task Mode\u003c/strong\u003e: In the eventuality that the victim application sets launchMode to singleTask, malicious applications can leverage M2.taskAffinity = com.victim.app to hijack the victim's application task stack.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTask Reparenting\u003c/strong\u003e: In the eventuality that the victim application sets taskReparenting to true, malicious applications can move the victim's application task to the malicious application's stack.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, in the case of StrandHogg 2.0, all exported activities without a launchMode of singleTask or singleInstance are affected on vulnerable Android versions.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:05.238831Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093225,
          "level": "High",
          "message": {
            "text": "Hardcoded Secrets"
          },
          "Vulnerability": {
            "vulnerabilityID": 120,
            "vulnerabilityDescription": "\u003cp\u003eMalicious actors could take advantage of the hardcoded secrets to access private databases, leading to data breaches and the exposure of users' personal data.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:06.129538Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093239,
          "level": "Medium",
          "message": {
            "text": "Android Tapjacking"
          },
          "Vulnerability": {
            "vulnerabilityID": 121,
            "vulnerabilityDescription": "\u003cp\u003eAndroid tapjacking is a type of attack where an attacker tricks or deceives a user into tapping on a seemingly harmless element on their Android device's screen, while secretly performing malicious actions in the background. Cybercriminals deploy overlay attacks to steal victims’ login credentials, bank card details, and other confidential information.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:06.371022Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093253,
          "level": "Passed",
          "message": {
            "text": "Keyboard Cache Exposure"
          },
          "Vulnerability": {
            "vulnerabilityID": 122,
            "vulnerabilityDescription": "\u003cp\u003eKeyboard caching is designed to enhance the user experience by making typing faster and more convenient. The keyboard cache typically stores information such as frequently used words, phrases, and personal data like contact names or email addresses. However, like any data stored on your device, there is a potential risk if someone gains unauthorized access to your device or if a malicious app(third party keyboards) is able to exploit the keyboard cache.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:06.593527Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093179,
          "level": "Medium",
          "message": {
            "text": "Weak PRNG (Pseudorandom number generator)"
          },
          "Vulnerability": {
            "vulnerabilityID": 127,
            "vulnerabilityDescription": "\u003cp\u003eWeak PRNG vulnerabilities stem from insufficiently random initializations, improper algorithms, or inadequate entropy sources. Such vulnerabilities can result in unauthorized access, data breaches, and compromised cryptographic operations.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:57:06.759344Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Appknox"
        }
      },
      "results": [
        {
          "ruleId": 4093204,
          "level": "Passed",
          "message": {
            "text": "Intent Redirection Vulnerability"
          },
          "Vulnerability": {
            "vulnerabilityID": 128,
            "vulnerabilityDescription": "\u003cp\u003eThe application is publicly exposing a feature that uses an externally provided intent to\nstart a new component. This allows an attacker to control the contents of an intent used\nto launch the new component, thus giving the attacker the ability to access private\ncomponents of the application. Depending on the features privately exposed, this can lead to\nfurther exploitations, sensitive data disclosure, or even persistent code execution.\u003c/p\u003e",
            "updatedOn": "2024-05-15T07:56:16.029878Z"
          },
          "location": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file path to source location"
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "tool": {
    "driver": {
      "name": "Appknox"
    }
  }
}